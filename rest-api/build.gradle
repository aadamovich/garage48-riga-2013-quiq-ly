import groovy.json.JsonBuilder

import com.gmongo.GMongo
import com.mongodb.DB

import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.ContentType.*
import static groovyx.net.http.Method.*

import com.aestasit.ssh.dsl.SshDslEngine
import com.aestasit.ssh.SshOptions

buildscript {
  repositories {
    maven { url "http://oss.jfrog.org/repo" }
    mavenCentral()
  }
  dependencies {
    classpath 'io.ratpack:ratpack-gradle:0.9.0-SNAPSHOT'
    classpath 'com.gmongo:gmongo:1.0'
    classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.6'
    classpath 'com.aestasit.infrastructure.sshoogr:sshoogr:0.9.3'
  }
}

project.ext {
  local = [
    database : 'localhost:27017',
    api : 'http://localhost:5050'
  ]
  production = [
    server: 'ec2-54-217-31-12.eu-west-1.compute.amazonaws.com',
    database: 'ec2-54-217-31-12.eu-west-1.compute.amazonaws.com:27017',
    api: 'http://ec2-54-217-31-12.eu-west-1.compute.amazonaws.com:5050'
  ]
}

repositories {
  maven { url "http://oss.jfrog.org/repo" }
  mavenCentral()
  maven { url "http://repo.springsource.org/repo" }
}

apply plugin: "ratpack-groovy"

configurations.all {
  exclude module: "groovy"
}

dependencies {
  springloaded 'org.springsource.springloaded:springloaded-core:1.1.4'
  compile 'com.gmongo:gmongo:1.0'
  compile 'org.codehaus.groovy:groovy-all:2.1.9'
}

test.onlyIf { false }

task cleanDb << {
  getDb().questions.drop()
}

task insertData << {
  getData().each { question ->
    def request = new JsonBuilder(question).toString()
    getDb().questions.insert(question)
  }
}

insertData.mustRunAfter cleanDb

task insertHttpData << {
  getData().each { question ->
    def request = new JsonBuilder(question).toString()
    getHttp('api/questions/new').request(POST, JSON) { req ->
      body = request
      response.success = { resp, json ->
      }
    }
  }
}

task deploy(dependsOn: distZip) << {
  getSsh().remoteSession {
    exec(command: 'sudo killall java', failOnError: false)
    scp {
      from {
        localFile "${buildDir}/distributions/rest-api.zip"
      }
      into {
        remoteDir "/tmp"
      }
    }
    exec 'sudo mkdir -p /var/lib/tellme'   
    exec 'sudo unzip /tmp/rest-api.zip -d /var/lib/tellme'
    exec 'sudo chown -R ubuntu:ubuntu /var/lib/tellme'
    exec 'cd /var/lib/tellme/rest-api/bin ; nohup sudo -b ./rest-api > /var/lib/tellme/rest-api/server.log'
  }
}


/////////////////////////////////////////////////////////////
// Utilities
/////////////////////////////////////////////////////////////

def getSsh() {
  def options = new SshOptions()
  options.with { 
    defaultKeyFile = new File('garage48.pem')
    defaultUser = 'ubuntu'
    defaultHost = project.production.server
    logger = new GradleLogger(project, true)
  }
  new SshDslEngine(options)  
}

def getDb() {
  def mongo = new GMongo()
  mongo.getDB('tell-me')
}

def getHttp(path) {
  if (project.hasProperty('env') && project.env == 'production') {
    return new HTTPBuilder("${project.production.api}/${path}")
  } else {
    return new HTTPBuilder("${project.local.api}/${path}")
  }
}

def getData() {
  [
    [ 
      title: 'Which colour of shoes is gonna be trending in S/S 2014?',
      answers: [
        [ title: 'Red', value: '13' ],
        [ title: 'Orange', value: '3' ],
        [ title: 'Blue', value: '36' ],
        [ title: 'Black', value: '48' ],
      ]
    ],
    [ 
      title: 'What is your role at Garage48?', 
      answers: [
        [ title: 'Visionary', value: '15' ],
        [ title: 'Marketer', value: '17' ],
        [ title: 'Designer', value: '30' ],
        [ title: 'Developer', value: '47' ],
        [ title: 'Miley Cyrus', value: '1' ],
      ]
    ],
  ]
}


class GradleLogger implements com.aestasit.ssh.log.Logger {

  Project project
  boolean verbose

  GradleLogger(Project project, boolean verbose) {
    super()
    this.verbose = verbose
    this.project = project
  }

  def void debug(String message) {
    project.logger.debug(message)
  }

  def void info(String message) {
    if (verbose) {
      project.logger.quiet(message)
    } else {
      project.logger.info(message)
    }
  }

  def void warn(String message) {
    project.logger.warn(message)
  }
}
